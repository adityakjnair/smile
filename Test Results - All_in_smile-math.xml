<?xml version="1.0" encoding="UTF-8"?><testrun duration="12411" footerText="Generated by IntelliJ IDEA on 11/20/18 5:08 PM" name="All in smile-math">
    <count name="total" value="349"/>
    <count name="passed" value="349"/>
    <config nameIsGenerated="true" configId="JUnit" name="All in smile-math">
        <module name="smile-math"/>
        <option name="PACKAGE_NAME" value=""/>
        <option name="TEST_OBJECT" value="package"/>
    </config>
    <root name="&lt;default package&gt;" location="java:suite://&lt;default package&gt;">
        <output type="stdout">/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home/bin/java -ea -Didea.test.cyclic.buffer.size=1048576 &amp;quot;-javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=60565:/Applications/IntelliJ IDEA CE.app/Contents/bin&amp;quot; -Dfile.encoding=UTF-8 -classpath &amp;quot;/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar:/Applications/IntelliJ IDEA CE.app/Contents/plugins/junit/lib/junit-rt.jar:/Applications/IntelliJ IDEA CE.app/Contents/plugins/junit/lib/junit5-rt.jar:/Users/yueyang/eclipse-workspace/smile-git/math/target/test-classes:/Users/yueyang/eclipse-workspace/smile-git/math/target/classes:/Users/yueyang/.m2/repository/org/slf4j/slf4j-simple/1.7.25/slf4j-simple-1.7.25.jar:/Users/yueyang/.m2/repository/junit/junit/4.12/junit-4.12.jar:/Users/yueyang/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/yueyang/.m2/repository/com/novocode/junit-interface/0.11/junit-interface-0.11.jar:/Users/yueyang/.m2/repository/org/scala-sbt/test-interface/1.0/test-interface-1.0.jar:/Users/yueyang/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar&amp;quot; com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 @w@/private/var/folders/kz/558_73xs4h7_ct4pj1wsvrch0000gn/T/idea_working_dirs_junit1.tmp @/private/var/folders/kz/558_73xs4h7_ct4pj1wsvrch0000gn/T/idea_junit1.tmp -socket60564
Process finished with exit code 0
</output>
    </root>
    <suite duration="59" locationUrl="java:suite://smile.math.ComplexTest" name="ComplexTest" status="passed">
        <test duration="59" locationUrl="java:test://smile.math.ComplexTest/testAll" name="ComplexTest.testAll" status="passed">
            <output type="stdout">Complex
a = 5.0000 + 6.0000i
b = -3.0000 + 4.0000i
a / b = 0.3600 - 1.5200i
</output>
        </test>
    </suite>
    <suite duration="100" locationUrl="java:suite://smile.math.MathTest" name="MathTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testLogChoose" name="MathTest.testLogChoose" status="passed">
            <output type="stdout">logChoose
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testDot_doubleArr_doubleArr" name="MathTest.testDot_doubleArr_doubleArr" status="passed">
            <output type="stdout">dot
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testNorm2_doubleArr" name="MathTest.testNorm2_doubleArr" status="passed">
            <output type="stdout">norm2
</output>
        </test>
        <test duration="2" locationUrl="java:test://smile.math.MathTest/testRoot_4args" name="MathTest.testRoot_4args" status="passed">
            <output type="stdout">root
</output>
        </test>
        <test duration="4" locationUrl="java:test://smile.math.MathTest/testRoot_5args" name="MathTest.testRoot_5args" status="passed">
            <output type="stdout">root
</output>
            <output type="stderr">[main] INFO smile.math.Math - Brent: the root after   9 iterations: -3.0000, error = 1.9531e-10
[main] INFO smile.math.Math - Brent: the root after   9 iterations: -3.0000, error = 1.9531e-10
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testStandardize" name="MathTest.testStandardize" status="passed">
            <output type="stdout">standardize
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testMin_doubleArr" name="MathTest.testMin_doubleArr" status="passed">
            <output type="stdout">min
</output>
        </test>
        <test duration="2" locationUrl="java:test://smile.math.MathTest/testSpearman_doubleArr_doubleArr" name="MathTest.testSpearman_doubleArr_doubleArr" status="passed">
            <output type="stdout">spearman
</output>
        </test>
        <test duration="3" locationUrl="java:test://smile.math.MathTest/testMad" name="MathTest.testMad" status="passed">
            <output type="stdout">mad
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testSqr" name="MathTest.testSqr" status="passed">
            <output type="stdout">sqr
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testGoodTuring" name="MathTest.testGoodTuring" status="passed">
            <output type="stdout">GoodTuring
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testClone" name="MathTest.testClone" status="passed">
            <output type="stdout">clone
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testColSd" name="MathTest.testColSd" status="passed">
            <output type="stdout">colSd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testLog2" name="MathTest.testLog2" status="passed">
            <output type="stdout">log2
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testSd" name="MathTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testUnitize" name="MathTest.testUnitize" status="passed">
            <output type="stdout">unitize
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testFactorial" name="MathTest.testFactorial" status="passed">
            <output type="stdout">factorial
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testKendall_doubleArr_doubleArr" name="MathTest.testKendall_doubleArr_doubleArr" status="passed">
            <output type="stdout">kendall
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testNorm1_doubleArr" name="MathTest.testNorm1_doubleArr" status="passed">
            <output type="stdout">norm1
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testSum_doubleArr" name="MathTest.testSum_doubleArr" status="passed">
            <output type="stdout">sum
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testMinus_doubleArr_doubleArr" name="MathTest.testMinus_doubleArr_doubleArr" status="passed">
            <output type="stdout">minus
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testColMeans" name="MathTest.testColMeans" status="passed">
            <output type="stdout">colMeans
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testDistance_doubleArr_doubleArr" name="MathTest.testDistance_doubleArr_doubleArr" status="passed">
            <output type="stdout">distance
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testVar_doubleArr" name="MathTest.testVar_doubleArr" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testMax_3args" name="MathTest.testMax_3args" status="passed">
            <output type="stdout">max
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testIsPower2" name="MathTest.testIsPower2" status="passed">
            <output type="stdout">isPower2
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testUnitize1" name="MathTest.testUnitize1" status="passed">
            <output type="stdout">unitize1
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testUnitize2" name="MathTest.testUnitize2" status="passed">
            <output type="stdout">unitize2
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testAdd_doubleArr_doubleArr" name="MathTest.testAdd_doubleArr_doubleArr" status="passed">
            <output type="stdout">add
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testColSums" name="MathTest.testColSums" status="passed">
            <output type="stdout">colSums
</output>
        </test>
        <test duration="18" locationUrl="java:test://smile.math.MathTest/testRandom2" name="MathTest.testRandom2" status="passed">
            <output type="stdout">random
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testCor_doubleArr_doubleArr" name="MathTest.testCor_doubleArr_doubleArr" status="passed">
            <output type="stdout">cor
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testMax_doubleArr" name="MathTest.testMax_doubleArr" status="passed">
            <output type="stdout">max
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testRowMeans" name="MathTest.testRowMeans" status="passed">
            <output type="stdout">rowMeans
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testSquaredDistance_doubleArr_doubleArr" name="MathTest.testSquaredDistance_doubleArr_doubleArr" status="passed">
            <output type="stdout">squaredDistance
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testNormInf_doubleArr" name="MathTest.testNormInf_doubleArr" status="passed">
            <output type="stdout">normInf
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testRowSums" name="MathTest.testRowSums" status="passed">
            <output type="stdout">rowSums
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testMin_3args" name="MathTest.testMin_3args" status="passed">
            <output type="stdout">min
</output>
        </test>
        <test duration="49" locationUrl="java:test://smile.math.MathTest/testMin_4args" name="MathTest.testMin_4args" status="passed">
            <output type="stdout">BFGS
</output>
            <output type="stderr">[main] INFO smile.math.Math - BFGS: initial function value: 1210.0
[main] INFO smile.math.Math - BFGS: the function value after  10 iterations: 3.1871
[main] INFO smile.math.Math - BFGS: the function value after  20 iterations: 1.0940
[main] INFO smile.math.Math - BFGS: the function value after  30 iterations: 0.22777
[main] INFO smile.math.Math - BFGS: the function value after  40 iterations: 0.030221
[main] INFO smile.math.Math - BFGS: the function value after  50 iterations: 0.011972
[main] INFO smile.math.Math - BFGS: the function value after  60 iterations: 0.0010206
[main] INFO smile.math.Math - BFGS: the function value after  70 iterations: 0.00052512
[main] INFO smile.math.Math - BFGS: the function value after  80 iterations: 7.5070e-05
[main] INFO smile.math.Math - BFGS: the function value after  90 iterations: 2.4584e-06
[main] INFO smile.math.Math - BFGS: the function value after 100 iterations: 2.8410e-07
[main] INFO smile.math.Math - BFGS: the function value after 110 iterations: 2.8913e-09
[main] INFO smile.math.Math - BFGS: the function value after 115 iterations: 2.9579e-10
[main] INFO smile.math.Math - L-BFGS: initial function value: 1210.0
[main] INFO smile.math.Math - L-BFGS: the function value after  10 iterations: 4.9076
[main] INFO smile.math.Math - L-BFGS: the function value after  20 iterations: 5.1455e-06
</output>
        </test>
        <test duration="4" locationUrl="java:test://smile.math.MathTest/testMin_5args" name="MathTest.testMin_5args" status="passed">
            <output type="stdout">L-BFGS
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testChoose" name="MathTest.testChoose" status="passed">
            <output type="stdout">choose
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testColMax" name="MathTest.testColMax" status="passed">
            <output type="stdout">colMax
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testColMin" name="MathTest.testColMin" status="passed">
            <output type="stdout">colMin
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testIsZero" name="MathTest.testIsZero" status="passed">
            <output type="stdout">isZero
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testMean_doubleArr" name="MathTest.testMean_doubleArr" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testMin_doubleArrArr" name="MathTest.testMin_doubleArrArr" status="passed">
            <output type="stdout">min
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testCov_doubleArr_doubleArr" name="MathTest.testCov_doubleArr_doubleArr" status="passed">
            <output type="stdout">cov
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testMax_doubleArrArr" name="MathTest.testMax_doubleArrArr" status="passed">
            <output type="stdout">max
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testRandom" name="MathTest.testRandom" status="passed">
            <output type="stdout">random
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testRowMax" name="MathTest.testRowMax" status="passed">
            <output type="stdout">rowMax
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testRowMin" name="MathTest.testRowMin" status="passed">
            <output type="stdout">rowMin
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.MathTest/testTranspose" name="MathTest.testTranspose" status="passed">
            <output type="stdout">transpose
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testNorm_doubleArr" name="MathTest.testNorm_doubleArr" status="passed">
            <output type="stdout">norm
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.MathTest/testLogFactorial" name="MathTest.testLogFactorial" status="passed">
            <output type="stdout">logFactorial
</output>
        </test>
    </suite>
    <suite duration="214" locationUrl="java:suite://smile.math.RandomTest" name="RandomTest" status="passed">
        <test duration="86" locationUrl="java:test://smile.math.RandomTest/testRandom_double_double" name="RandomTest.testRandom_double_double" status="passed">
            <output type="stdout">nextDouble
</output>
        </test>
        <test duration="37" locationUrl="java:test://smile.math.RandomTest/testRandomInt_int_int" name="RandomTest.testRandomInt_int_int" status="passed">
            <output type="stdout">nextInt
</output>
        </test>
        <test duration="61" locationUrl="java:test://smile.math.RandomTest/testRandomInt_int" name="RandomTest.testRandomInt_int" status="passed">
            <output type="stdout">nextInt
</output>
        </test>
        <test duration="30" locationUrl="java:test://smile.math.RandomTest/testRandom" name="RandomTest.testRandom" status="passed">
            <output type="stdout">random
</output>
        </test>
    </suite>
    <suite duration="0" locationUrl="java:suite://smile.math.distance.ChebyshevDistanceTest" name="ChebyshevDistanceTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.math.distance.ChebyshevDistanceTest/testDistance" name="ChebyshevDistanceTest.testDistance" status="passed">
            <output type="stdout">distance
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.math.distance.CorrelationDistanceTest" name="CorrelationDistanceTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.math.distance.CorrelationDistanceTest/testDistance" name="CorrelationDistanceTest.testDistance" status="passed">
            <output type="stdout">distance
</output>
        </test>
    </suite>
    <suite duration="5" locationUrl="java:suite://smile.math.distance.DynamicTimeWarpingTest" name="DynamicTimeWarpingTest" status="passed">
        <test duration="5" locationUrl="java:test://smile.math.distance.DynamicTimeWarpingTest/testD" name="DynamicTimeWarpingTest.testD" status="passed">
            <output type="stdout">d
</output>
        </test>
    </suite>
    <suite duration="496" locationUrl="java:suite://smile.math.distance.EditDistanceTest" name="EditDistanceTest" status="passed">
        <test duration="133" locationUrl="java:test://smile.math.distance.EditDistanceTest/testDistance" name="EditDistanceTest.testDistance" status="passed">
            <output type="stdout">distance
</output>
        </test>
        <test duration="87" locationUrl="java:test://smile.math.distance.EditDistanceTest/testDistance2" name="EditDistanceTest.testDistance2" status="passed">
            <output type="stdout">distance
</output>
        </test>
        <test duration="66" locationUrl="java:test://smile.math.distance.EditDistanceTest/testDistance3" name="EditDistanceTest.testDistance3" status="passed">
            <output type="stdout">distance
248
</output>
        </test>
        <test duration="32" locationUrl="java:test://smile.math.distance.EditDistanceTest/testDistance4" name="EditDistanceTest.testDistance4" status="passed">
            <output type="stdout">distance
248.0
</output>
        </test>
        <test duration="99" locationUrl="java:test://smile.math.distance.EditDistanceTest/testDistance5" name="EditDistanceTest.testDistance5" status="passed">
            <output type="stdout">distance
248
</output>
        </test>
        <test duration="79" locationUrl="java:test://smile.math.distance.EditDistanceTest/testDistance6" name="EditDistanceTest.testDistance6" status="passed">
            <output type="stdout">distance
248.0
</output>
        </test>
    </suite>
    <suite duration="2" locationUrl="java:suite://smile.math.distance.EuclideanDistanceTest" name="EuclideanDistanceTest" status="passed">
        <test duration="2" locationUrl="java:test://smile.math.distance.EuclideanDistanceTest/testDistance" name="EuclideanDistanceTest.testDistance" status="passed">
            <output type="stdout">distance
</output>
        </test>
    </suite>
    <suite duration="0" locationUrl="java:suite://smile.math.distance.HammingDistanceTest" name="HammingDistanceTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.math.distance.HammingDistanceTest/testDistance" name="HammingDistanceTest.testDistance" status="passed">
            <output type="stdout">distance
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.distance.HammingDistanceTest/testDistanceArray" name="HammingDistanceTest.testDistanceArray" status="passed">
            <output type="stdout">distance
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.distance.HammingDistanceTest/testDistanceBitSet" name="HammingDistanceTest.testDistanceBitSet" status="passed">
            <output type="stdout">distance
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.math.distance.JaccardDistanceTest" name="JaccardDistanceTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.math.distance.JaccardDistanceTest/testDistance" name="JaccardDistanceTest.testDistance" status="passed">
            <output type="stdout">distance
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.math.distance.LeeDistanceTest" name="LeeDistanceTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.math.distance.LeeDistanceTest/testDistance" name="LeeDistanceTest.testDistance" status="passed">
            <output type="stdout">distance
</output>
        </test>
    </suite>
    <suite duration="11" locationUrl="java:suite://smile.math.distance.MahalanobisDistanceTest" name="MahalanobisDistanceTest" status="passed">
        <test duration="11" locationUrl="java:test://smile.math.distance.MahalanobisDistanceTest/testDistance" name="MahalanobisDistanceTest.testDistance" status="passed">
            <output type="stdout">distance
</output>
            <output type="stderr">[main] INFO smile.math.matrix.Factory - smile-netlib module is not available in the classpath. Pure Java matrix library will be employed.
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.math.distance.ManhattanDistanceTest" name="ManhattanDistanceTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.math.distance.ManhattanDistanceTest/testDistanceInt" name="ManhattanDistanceTest.testDistanceInt" status="passed">
            <output type="stdout">distance
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.distance.ManhattanDistanceTest/testDistanceDouble" name="ManhattanDistanceTest.testDistanceDouble" status="passed">
            <output type="stdout">distance
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.math.distance.MinkowskiDistanceTest" name="MinkowskiDistanceTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.math.distance.MinkowskiDistanceTest/testDistance" name="MinkowskiDistanceTest.testDistance" status="passed">
            <output type="stdout">distance
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.math.matrix.BandMatrixTest" name="BandMatrixTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.math.matrix.BandMatrixTest/testSolve" name="BandMatrixTest.testSolve" status="passed">
            <output type="stdout">solve
</output>
        </test>
    </suite>
    <suite duration="9" locationUrl="java:suite://smile.math.matrix.BiconjugateGradientTest" name="BiconjugateGradientTest" status="passed">
        <test duration="8" locationUrl="java:test://smile.math.matrix.BiconjugateGradientTest/testSolveSparseMatrix" name="BiconjugateGradientTest.testSolveSparseMatrix" status="passed">
            <output type="stdout">setUp
naive matrix
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.matrix.BiconjugateGradientTest/testSolveMatrix" name="BiconjugateGradientTest.testSolveMatrix" status="passed">
            <output type="stderr">[main] INFO smile.math.matrix.BiconjugateGradient - BCG: the error after   3 iterations: 9.2291e-16
</output>
            <output type="stdout">setUp
naive matrix
</output>
        </test>
    </suite>
    <suite duration="3" locationUrl="java:suite://smile.math.matrix.CholeskyTest" name="CholeskyTest" status="passed">
        <test duration="2" locationUrl="java:test://smile.math.matrix.CholeskyTest/testSolve" name="CholeskyTest.testSolve" status="passed">
            <output type="stdout">solve
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.matrix.CholeskyTest/testDecompose" name="CholeskyTest.testDecompose" status="passed">
            <output type="stdout">decompose
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.CholeskyTest/testSolveMatrix" name="CholeskyTest.testSolveMatrix" status="passed">
            <output type="stdout">solve
</output>
        </test>
    </suite>
    <suite duration="4" locationUrl="java:suite://smile.math.matrix.EVDTest" name="EVDTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.math.matrix.EVDTest/testDecompose2" name="EVDTest.testDecompose2" status="passed">
            <output type="stdout">decompose
</output>
        </test>
        <test duration="4" locationUrl="java:test://smile.math.matrix.EVDTest/testDecompose3" name="EVDTest.testDecompose3" status="passed">
            <output type="stdout">decompose
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.EVDTest/testDecompose4" name="EVDTest.testDecompose4" status="passed">
            <output type="stdout">decompose
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.EVDTest/testDecompose" name="EVDTest.testDecompose" status="passed">
            <output type="stdout">decompose
</output>
        </test>
    </suite>
    <suite duration="2" locationUrl="java:suite://smile.math.matrix.JMatrixTest" name="JMatrixTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.math.matrix.JMatrixTest/testAAT" name="JMatrixTest.testAAT" status="passed">
            <output type="stdout">AAT
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.JMatrixTest/testAdd" name="JMatrixTest.testAdd" status="passed">
            <output type="stdout">add
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.JMatrixTest/testAtx" name="JMatrixTest.testAtx" status="passed">
            <output type="stdout">atx
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.JMatrixTest/testGet" name="JMatrixTest.testGet" status="passed">
            <output type="stdout">get
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.matrix.JMatrixTest/testSub" name="JMatrixTest.testSub" status="passed">
            <output type="stdout">sub
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.JMatrixTest/testNcols" name="JMatrixTest.testNcols" status="passed">
            <output type="stdout">ncols
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.JMatrixTest/testNrows" name="JMatrixTest.testNrows" status="passed">
            <output type="stdout">nrows
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.JMatrixTest/testAx" name="JMatrixTest.testAx" status="passed">
            <output type="stdout">ax
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.JMatrixTest/testMm" name="JMatrixTest.testMm" status="passed">
            <output type="stdout">mm
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.matrix.JMatrixTest/testColMeans" name="JMatrixTest.testColMeans" status="passed">
            <output type="stdout">colMeans
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.JMatrixTest/testRowMeans" name="JMatrixTest.testRowMeans" status="passed">
            <output type="stdout">rowMeans
</output>
        </test>
    </suite>
    <suite duration="0" locationUrl="java:suite://smile.math.matrix.LUTest" name="LUTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.math.matrix.LUTest/testSolve" name="LUTest.testSolve" status="passed">
            <output type="stdout">solve a vector
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.LUTest/testSolveMatrix" name="LUTest.testSolveMatrix" status="passed">
            <output type="stdout">solve a matrix
</output>
        </test>
    </suite>
    <suite duration="293" locationUrl="java:suite://smile.math.matrix.LanczosTest" name="LanczosTest" status="passed">
        <test duration="59" locationUrl="java:test://smile.math.matrix.LanczosTest/testDecompose1" name="LanczosTest.testDecompose1" status="passed">
            <output type="stdout">svd symm
</output>
            <output type="stderr">[main] INFO smile.math.matrix.Lanczos - Lancozs method found 3 converged eigenvalues of the 3-by-3 matrix
[main] INFO smile.math.matrix.Lanczos - ritz[0] = 3.061933562500683
[main] INFO smile.math.matrix.Lanczos - ritz[1] = 0.10022191258658175
[main] INFO smile.math.matrix.Lanczos - ritz[2] = 0.01784452491273472
[main] INFO smile.math.matrix.Lanczos - Lanczos: 1 iterations for Matrix of size 3
[main] INFO smile.math.matrix.Lanczos - Lancozs method found 7 converged eigenvalues of the 7-by-7 matrix
[main] INFO smile.math.matrix.Lanczos - ritz[0] = 14.891398849004243
[main] INFO smile.math.matrix.Lanczos - ritz[1] = 11.831375111708704
[main] INFO smile.math.matrix.Lanczos - ritz[2] = 7.015704825639272
[main] INFO smile.math.matrix.Lanczos - ritz[3] = 4.9806632493917515
[main] INFO smile.math.matrix.Lanczos - ritz[4] = 2.2997887294629162
[main] INFO smile.math.matrix.Lanczos - ritz[5] = 0.6575676405148501
[main] INFO smile.math.matrix.Lanczos - ritz[6] = 0.07325223112522294
[main] INFO smile.math.matrix.Lanczos - Lanczos: 1 iterations for Matrix of size 7
[main] INFO smile.math.matrix.Lanczos - Lancozs method found 6 converged eigenvalues of the 6-by-6 matrix
[main] INFO smile.math.matrix.Lanczos - ritz[0] = 13.283843349619396
[main] INFO smile.math.matrix.Lanczos - ritz[1] = 10.060962094184566
[main] INFO smile.math.matrix.Lanczos - ritz[2] = 5.834650948685977
[main] INFO smile.math.matrix.Lanczos - ritz[3] = 2.8739571292395865
[main] INFO smile.math.matrix.Lanczos - ritz[4] = 1.071028682322945
[main] INFO smile.math.matrix.Lanczos - ritz[5] = 0.45363355831897256
[main] INFO smile.math.matrix.Lanczos - Lanczos: 1 iterations for Matrix of size 6
[main] INFO smile.math.matrix.Lanczos - Lancozs method found 5 converged eigenvalues of the 5-by-5 matrix
[main] INFO smile.math.matrix.Lanczos - ritz[0] = 13.244409286229727
[main] INFO smile.math.matrix.Lanczos - ritz[1] = 9.588514081525549
[main] INFO smile.math.matrix.Lanczos - ritz[2] = 5.823376421896403
[main] INFO smile.math.matrix.Lanczos - ritz[3] = 2.6521938628652464
[main] INFO smile.math.matrix.Lanczos - ritz[4] = 0.5618426092011384
[main] INFO smile.math.matrix.Lanczos - Lanczos: 1 iterations for Matrix of size 5
</output>
        </test>
        <test duration="2" locationUrl="java:test://smile.math.matrix.LanczosTest/testDecompose2" name="LanczosTest.testDecompose2" status="passed">
            <output type="stdout">svd asymm
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.matrix.LanczosTest/testSVD3" name="LanczosTest.testSVD3" status="passed">
            <output type="stdout">svd m = n+1
</output>
        </test>
        <test duration="2" locationUrl="java:test://smile.math.matrix.LanczosTest/testSVD4" name="LanczosTest.testSVD4" status="passed">
            <output type="stdout">svd m = n+2
</output>
        </test>
        <test duration="3" locationUrl="java:test://smile.math.matrix.LanczosTest/testSVD9" name="LanczosTest.testSVD9" status="passed">
            <output type="stdout">SparseMatrix.svd()
</output>
            <output type="stderr">[main] INFO smile.math.matrix.Lanczos - Lancozs method found 9 converged eigenvalues of the 9-by-9 matrix
[main] INFO smile.math.matrix.Lanczos - ritz[0] = 11.161504245266702
[main] INFO smile.math.matrix.Lanczos - ritz[1] = 6.460243973612617
[main] INFO smile.math.matrix.Lanczos - ritz[2] = 5.541050084356319
[main] INFO smile.math.matrix.Lanczos - ritz[3] = 2.7044864606551426
[main] INFO smile.math.matrix.Lanczos - ritz[4] = 2.2645179953460084
[main] INFO smile.math.matrix.Lanczos - ritz[5] = 1.7066337999003842
[main] INFO smile.math.matrix.Lanczos - ritz[6] = 0.7155520252321744
[main] INFO smile.math.matrix.Lanczos - ritz[7] = 0.31375057164942616
[main] INFO smile.math.matrix.Lanczos - ritz[8] = 0.1322608439812251
[main] INFO smile.math.matrix.Lanczos - Lanczos: 1 iterations for Matrix of size 9
[main] INFO smile.math.matrix.Lanczos - Lancozs method found 3 converged eigenvalues of the 3-by-3 matrix
[main] INFO smile.math.matrix.Lanczos - ritz[0] = 1.7498381532303733
[main] INFO smile.math.matrix.Lanczos - ritz[1] = 0.3165784461813246
[main] INFO smile.math.matrix.Lanczos - ritz[2] = 0.13358340058830215
[main] INFO smile.math.matrix.Lanczos - Lanczos: 1 iterations for Matrix of size 3
</output>
        </test>
        <test duration="2" locationUrl="java:test://smile.math.matrix.LanczosTest/testLanczos" name="LanczosTest.testLanczos" status="passed">
            <output type="stdout">eigen
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.matrix.LanczosTest/testEigen1" name="LanczosTest.testEigen1" status="passed">
            <output type="stdout">eigen1
</output>
            <output type="stderr">[main] INFO smile.math.matrix.Lanczos - Lancozs method found 3 converged eigenvalues of the 3-by-3 matrix
</output>
        </test>
        <test duration="223" locationUrl="java:test://smile.math.matrix.LanczosTest/testEigen2" name="LanczosTest.testEigen2" status="passed">
            <output type="stdout">eigen2
</output>
            <output type="stderr">[main] INFO smile.math.matrix.Lanczos - Lancozs method found 0 converged eigenvalues of the 14-by-14 matrix
[main] INFO smile.math.matrix.Lanczos - Lancozs method found 1 converged eigenvalues of the 23-by-23 matrix
[main] INFO smile.math.matrix.Lanczos - ritz[0] = 1.9999999999999998
[main] INFO smile.math.matrix.Lanczos - Lancozs method found 1 converged eigenvalues of the 37-by-37 matrix
[main] INFO smile.math.matrix.Lanczos - ritz[0] = 2.0000000000000013
[main] INFO smile.math.matrix.Lanczos - Lancozs method found 3 converged eigenvalues of the 74-by-74 matrix
[main] INFO smile.math.matrix.Lanczos - ritz[0] = 1.9999999999999991
[main] INFO smile.math.matrix.Lanczos - ritz[1] = 1.9999999999999987
[main] INFO smile.math.matrix.Lanczos - ritz[2] = 1.9999999999999987
[main] INFO smile.math.matrix.Lanczos - Lancozs method found 4 converged eigenvalues of the 134-by-134 matrix
[main] INFO smile.math.matrix.Lanczos - ritz[0] = 2.0000000000000075
[main] INFO smile.math.matrix.Lanczos - ritz[1] = 2.0000000000000053
[main] INFO smile.math.matrix.Lanczos - ritz[2] = 2.0000000000000004
[main] INFO smile.math.matrix.Lanczos - ritz[3] = 1.9999999999999973
[main] INFO smile.math.matrix.Lanczos - Lancozs method found 6 converged eigenvalues of the 194-by-194 matrix
[main] INFO smile.math.matrix.Lanczos - ritz[0] = 2.0000000000000018
[main] INFO smile.math.matrix.Lanczos - ritz[1] = 1.9999999999999998
[main] INFO smile.math.matrix.Lanczos - ritz[2] = 1.9999999999999991
[main] INFO smile.math.matrix.Lanczos - ritz[3] = 1.9999999999999976
[main] INFO smile.math.matrix.Lanczos - ritz[4] = 0.9920000000000001
[main] INFO smile.math.matrix.Lanczos - ritz[5] = 0.9900000000000001
[main] INFO smile.math.matrix.Lanczos - Lanczos: 6 iterations for Matrix of size 500
[main] INFO smile.math.matrix.PowerIteration - Largest eigenvalue after   7 power iterations: 1.74984
[main] INFO smile.math.matrix.PowerIteration - Largest eigenvalue after   4 power iterations: -1.75021
[main] ERROR smile.math.matrix.PowerIteration - Power iteration exceeded the maximum number of iterations.
</output>
        </test>
    </suite>
    <suite duration="2" locationUrl="java:suite://smile.math.matrix.PowerIterationTest" name="PowerIterationTest" status="passed">
        <test duration="2" locationUrl="java:test://smile.math.matrix.PowerIterationTest/testEigen" name="PowerIterationTest.testEigen" status="passed">
            <output type="stdout">Eigen
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.math.matrix.QRTest" name="QRTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.math.matrix.QRTest/testSolve" name="QRTest.testSolve" status="passed">
            <output type="stdout">solve
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.QRTest/testSolveMatrix" name="QRTest.testSolveMatrix" status="passed">
            <output type="stdout">solve
</output>
        </test>
    </suite>
    <suite duration="6" locationUrl="java:suite://smile.math.matrix.SVDTest" name="SVDTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.math.matrix.SVDTest/testDecompose1" name="SVDTest.testDecompose1" status="passed">
            <output type="stdout">decompose symm
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.matrix.SVDTest/testDecompose2" name="SVDTest.testDecompose2" status="passed">
            <output type="stdout">decompose asymm
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.SVDTest/testDecompose3" name="SVDTest.testDecompose3" status="passed">
            <output type="stdout">decompose m = n+1
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.matrix.SVDTest/testDecompose4" name="SVDTest.testDecompose4" status="passed">
            <output type="stdout">decompose m = n+2
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.matrix.SVDTest/testDecompose5" name="SVDTest.testDecompose5" status="passed">
            <output type="stdout">decompose m = n+3
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.SVDTest/testDecompose6" name="SVDTest.testDecompose6" status="passed">
            <output type="stdout">decompose m = n-1
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.SVDTest/testDecompose7" name="SVDTest.testDecompose7" status="passed">
            <output type="stdout">decompose m = n-2
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.SVDTest/testDecompose8" name="SVDTest.testDecompose8" status="passed">
            <output type="stdout">decompose m = n-3
</output>
        </test>
        <test duration="2" locationUrl="java:test://smile.math.matrix.SVDTest/testDecompose9" name="SVDTest.testDecompose9" status="passed">
            <output type="stdout">decompose sparse matrix
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.math.matrix.SVDTest/testSolve_doubleArrArr_doubleArrArr" name="SVDTest.testSolve_doubleArrArr_doubleArrArr" status="passed">
            <output type="stdout">solve
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.SVDTest/testSolve_doubleArr_doubleArr" name="SVDTest.testSolve_doubleArr_doubleArr" status="passed">
            <output type="stdout">solve
</output>
        </test>
    </suite>
    <suite duration="2" locationUrl="java:suite://smile.math.matrix.SparseMatrixTest" name="SparseMatrixTest" status="passed">
        <test duration="2" locationUrl="java:test://smile.math.matrix.SparseMatrixTest/testAAT" name="SparseMatrixTest.testAAT" status="passed">
            <output type="stdout">AAT
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.SparseMatrixTest/testGet" name="SparseMatrixTest.testGet" status="passed">
            <output type="stdout">get
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.SparseMatrixTest/testNcols" name="SparseMatrixTest.testNcols" status="passed">
            <output type="stdout">ncols
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.SparseMatrixTest/testNrows" name="SparseMatrixTest.testNrows" status="passed">
            <output type="stdout">nrows
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.SparseMatrixTest/testNvals" name="SparseMatrixTest.testNvals" status="passed">
            <output type="stdout">nvals
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.matrix.SparseMatrixTest/testTimes" name="SparseMatrixTest.testTimes" status="passed">
            <output type="stdout">times
</output>
        </test>
    </suite>
    <suite duration="3" locationUrl="java:suite://smile.math.special.GammaTest" name="GammaTest" status="passed">
        <test duration="3" locationUrl="java:test://smile.math.special.GammaTest/testLogGamma" name="GammaTest.testLogGamma" status="passed">
            <output type="stdout">lgamma
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.special.GammaTest/testGamma" name="GammaTest.testGamma" status="passed">
            <output type="stdout">gamma
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.special.GammaTest/testIncompleteGamma" name="GammaTest.testIncompleteGamma" status="passed">
            <output type="stdout">incompleteGamma
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.math.special.GammaTest/testUpperIncompleteGamma" name="GammaTest.testUpperIncompleteGamma" status="passed">
            <output type="stdout">incompleteGamma
</output>
        </test>
    </suite>
    <suite duration="9475" locationUrl="java:suite://smile.sort.HeapSelectTest" name="HeapSelectTest" status="passed">
        <test duration="12" locationUrl="java:test://smile.sort.HeapSelectTest/testSelectDouble" name="HeapSelectTest.testSelectDouble" status="passed">
            <output type="stdout">DoubleHeapSelect
</output>
        </test>
        <test duration="2863" locationUrl="java:test://smile.sort.HeapSelectTest/testSelectBig" name="HeapSelectTest.testSelectBig" status="passed">
            <output type="stdout">HeapSelect Big
0.0
0.0
0.0
0.0
0.0
0.0
0.0
5.9604644775390625E-8
5.9604644775390625E-8
5.9604644775390625E-8
</output>
        </test>
        <test duration="4" locationUrl="java:test://smile.sort.HeapSelectTest/testSelectInt" name="HeapSelectTest.testSelectInt" status="passed">
            <output type="stdout">IntHeapSelect
</output>
        </test>
        <test duration="2388" locationUrl="java:test://smile.sort.HeapSelectTest/testFloatSelectBig" name="HeapSelectTest.testFloatSelectBig" status="passed">
            <output type="stdout">FloatHeapSelect Big
0.0
0.0
0.0
0.0
0.0
0.0
5.9604645E-8
5.9604645E-8
5.9604645E-8
1.1920929E-7
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.sort.HeapSelectTest/testSelectFloat" name="HeapSelectTest.testSelectFloat" status="passed">
            <output type="stdout">FloatHeapSelect
</output>
        </test>
        <test duration="1434" locationUrl="java:test://smile.sort.HeapSelectTest/testIntSelectBig" name="HeapSelectTest.testIntSelectBig" status="passed">
            <output type="stdout">IntHeapSelect Big
0
0
0
0
0
0
0
0
0
0
</output>
        </test>
        <test duration="2767" locationUrl="java:test://smile.sort.HeapSelectTest/testDoubleSelectBig" name="HeapSelectTest.testDoubleSelectBig" status="passed">
            <output type="stdout">DoubleHeapSelect Big
0.0
0.0
0.0
0.0
0.0
0.0
5.9604644775390625E-8
5.9604644775390625E-8
5.9604644775390625E-8
5.9604644775390625E-8
</output>
        </test>
        <test duration="6" locationUrl="java:test://smile.sort.HeapSelectTest/testSelect" name="HeapSelectTest.testSelect" status="passed">
            <output type="stdout">HeapSelect
</output>
        </test>
    </suite>
    <suite duration="222" locationUrl="java:suite://smile.sort.HeapSortTest" name="HeapSortTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.sort.HeapSortTest/testSortDouble" name="HeapSortTest.testSortDouble" status="passed">
            <output type="stdout">sort double
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.sort.HeapSortTest/testSortObject" name="HeapSortTest.testSortObject" status="passed">
            <output type="stdout">sort object
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.sort.HeapSortTest/testSortFloat" name="HeapSortTest.testSortFloat" status="passed">
            <output type="stdout">sort float
</output>
        </test>
        <test duration="221" locationUrl="java:test://smile.sort.HeapSortTest/testSortBig" name="HeapSortTest.testSortBig" status="passed">
            <output type="stdout">sort big array
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.sort.HeapSortTest/testSortInt" name="HeapSortTest.testSortInt" status="passed">
            <output type="stdout">sort int
</output>
        </test>
    </suite>
    <suite duration="88" locationUrl="java:suite://smile.sort.IQAgentTest" name="IQAgentTest" status="passed">
        <test duration="88" locationUrl="java:test://smile.sort.IQAgentTest/testAdd" name="IQAgentTest.testAdd" status="passed">
            <output type="stdout">IQAgent
1%	1002.8198385974155	0.002819838597415414
2%	2003.702563644344	0.0018512818221720906
3%	2998.341354869597	5.528817101343453E-4
4%	3997.1048958889924	7.237760277518657E-4
5%	4996.297305588564	7.405388822872006E-4
6%	6000.625368155084	1.042280258474193E-4
7%	7002.383022833231	3.404318333186662E-4
8%	7998.321939744391	2.097575319511824E-4
9%	8997.98966195949	2.2337089339008465E-4
10%	9999.51545128615	4.845487138505078E-5
11%	10999.279187959268	6.5528367339307E-5
12%	12000.622002935606	5.183357796711974E-5
13%	13006.262404718469	4.817234398821757E-4
14%	13994.207654995675	4.1373892888041386E-4
15%	15008.221167262742	5.480778175162015E-4
16%	15999.532529556966	2.921690268964383E-5
17%	17005.59781373238	3.2928316072822206E-4
18%	18001.493526579037	8.297369883547567E-5
19%	19002.37244222422	1.248653802221611E-4
20%	20009.25010091287	4.6250504564349093E-4
21%	21009.082999982118	4.3252380867220275E-4
22%	21994.794413788946	2.3661755504789106E-4
23%	22987.136206196392	5.592953827655567E-4
24%	23992.121347914952	3.2827717021033376E-4
25%	24988.08806794339	4.764772822644092E-4
26%	25995.9802399701	1.5460615499618413E-4
27%	27015.701733214384	5.81545674606776E-4
28%	28019.55291329924	6.983183321158659E-4
29%	28991.04492854709	3.087955673417575E-4
30%	29989.93830372071	3.3538987597625525E-4
31%	30997.80272678347	7.08797811783679E-5
32%	32004.89340908641	1.5291903395020512E-4
33%	32989.12862518598	3.294356004248655E-4
34%	33992.390315135635	2.2381426071660382E-4
35%	34994.2111873782	1.6539464633724688E-4
36%	36005.994349830195	1.6650971750542531E-4
37%	36995.35393259865	1.2556938922569927E-4
38%	37998.20190229018	4.731836078475382E-5
39%	39006.8382568043	1.753399180590698E-4
40%	39991.89358119529	2.0266047011774369E-4
41%	41006.2740520755	1.5302566037811438E-4
42%	42004.098848280904	9.759162573574898E-5
43%	42987.8720775021	2.820447092535261E-4
44%	43999.11490804456	2.01157262599283E-5
45%	44988.22856458073	2.615874537615914E-4
46%	46000.86051820307	1.8706917458199968E-5
47%	47018.68081811552	3.9746421522379727E-4
48%	48007.79631606223	1.6242325129645074E-4
49%	49001.56534907135	3.1945899415353196E-5
50%	49987.25890150289	2.548219699420873E-4
51%	51000.456992535495	8.960637950972128E-6
52%	52002.047298330865	3.937112174745572E-5
53%	52995.94154196626	7.657467988186895E-5
54%	53992.46128630435	1.3960580917871113E-4
55%	55007.209975481375	1.3109046329762286E-4
56%	55998.73593795848	2.2572536455656156E-5
57%	56992.45141475083	1.324313201608307E-4
58%	57978.014767749606	3.7905572845509106E-4
59%	59000.26790469031	4.54075746292304E-6
60%	60019.014191250484	3.1690318750809965E-4
61%	61016.71725141284	2.7405330184993026E-4
62%	62007.08753765457	1.1431512346082862E-4
63%	63004.0899715509	6.49201833475832E-5
64%	64001.58675445756	2.479303839941771E-5
65%	64997.79796346987	3.387748507888144E-5
66%	65996.0499250069	5.9849621107610496E-5
67%	67004.0792173244	6.088384066260666E-5
68%	68006.01282333671	8.842387259866413E-5
69%	69008.5986668708	1.2461836044641572E-4
70%	69994.2835662141	8.166333979853224E-5
71%	70988.88821536067	1.5650400900468764E-4
72%	72004.56791733736	6.34432963522169E-5
73%	73001.20927723372	1.6565441557814253E-5
74%	73986.22427303586	1.861584724884846E-4
75%	75004.97486485378	6.633153138380088E-5
76%	76010.0635364507	1.3241495329863184E-4
77%	76987.8198435609	1.5818384985855083E-4
78%	78005.38023476899	6.89773688331563E-5
79%	78990.92367078595	1.1489024321575947E-4
80%	79986.99254159471	1.6259323006617699E-4
81%	80987.81477893321	1.5043482798504648E-4
82%	82000.49106977235	5.98865576040275E-6
83%	83009.66066346067	1.1639353567072241E-4
84%	84001.63462248008	1.945979142958798E-5
85%	84988.4755056114	1.355822869247847E-4
86%	85996.35045910729	4.24365220083045E-5
87%	87002.76197053894	3.1746787803932364E-5
88%	87996.0757650234	4.459357927955043E-5
89%	89004.38801942437	4.930358903787457E-5
90%	90007.31710511842	8.130116798232834E-5
91%	90999.11677702288	9.705747001320653E-6
92%	91996.89466299539	3.375366309366079E-5
93%	92996.581815507	3.675467196773141E-5
94%	94004.20659790469	4.4751041539337066E-5
95%	95001.14931585564	1.2098061638265989E-5
96%	96000.11120712246	1.1584075256809712E-6
97%	96997.84482849657	2.2218262921924747E-5
98%	97997.20269217316	2.8543957416693466E-5
99%	99002.29351407298	2.3166808817975948E-5
100%	100000.0	0.0
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.sort.QuickSelectTest" name="QuickSelectTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.sort.QuickSelectTest/testMedianInt" name="QuickSelectTest.testMedianInt" status="passed">
            <output type="stdout">median int
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.sort.QuickSelectTest/testMedianFloat" name="QuickSelectTest.testMedianFloat" status="passed">
            <output type="stdout">median float
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.sort.QuickSelectTest/testMedianDouble" name="QuickSelectTest.testMedianDouble" status="passed">
            <output type="stdout">median double
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.sort.QuickSelectTest/testMedianObject" name="QuickSelectTest.testMedianObject" status="passed">
            <output type="stdout">median object
</output>
        </test>
    </suite>
    <suite duration="157" locationUrl="java:suite://smile.sort.QuickSortTest" name="QuickSortTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.sort.QuickSortTest/testSortDouble" name="QuickSortTest.testSortDouble" status="passed">
            <output type="stdout">sort double
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.sort.QuickSortTest/testSortObject" name="QuickSortTest.testSortObject" status="passed">
            <output type="stdout">sort object
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.sort.QuickSortTest/testSortFloat" name="QuickSortTest.testSortFloat" status="passed">
            <output type="stdout">sort float
</output>
        </test>
        <test duration="156" locationUrl="java:test://smile.sort.QuickSortTest/testSortBig" name="QuickSortTest.testSortBig" status="passed">
            <output type="stdout">sort big array
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.sort.QuickSortTest/testSortInt" name="QuickSortTest.testSortInt" status="passed">
            <output type="stdout">sort int
</output>
        </test>
    </suite>
    <suite duration="230" locationUrl="java:suite://smile.sort.ShellSortTest" name="ShellSortTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.sort.ShellSortTest/testSortDouble" name="ShellSortTest.testSortDouble" status="passed">
            <output type="stdout">sort double
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.sort.ShellSortTest/testSortObject" name="ShellSortTest.testSortObject" status="passed">
            <output type="stdout">sort object
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.sort.ShellSortTest/testSortFloat" name="ShellSortTest.testSortFloat" status="passed">
            <output type="stdout">sort float
</output>
        </test>
        <test duration="228" locationUrl="java:test://smile.sort.ShellSortTest/testSortBig" name="ShellSortTest.testSortBig" status="passed">
            <output type="stdout">sort big array
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.sort.ShellSortTest/testSortInt" name="ShellSortTest.testSortInt" status="passed">
            <output type="stdout">sort int
</output>
        </test>
    </suite>
    <suite duration="0" locationUrl="java:suite://smile.stat.distribution.BernoulliDistributionTest" name="BernoulliDistributionTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BernoulliDistributionTest/testEntropy" name="BernoulliDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BernoulliDistributionTest/testCdf" name="BernoulliDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BernoulliDistributionTest/testVar" name="BernoulliDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BernoulliDistributionTest/testNpara" name="BernoulliDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BernoulliDistributionTest/testLogP" name="BernoulliDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BernoulliDistributionTest/testMean" name="BernoulliDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BernoulliDistributionTest/testSd" name="BernoulliDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BernoulliDistributionTest/testQuantile" name="BernoulliDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BernoulliDistributionTest/testP" name="BernoulliDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BernoulliDistributionTest/testBernoulliDistribution" name="BernoulliDistributionTest.testBernoulliDistribution" status="passed">
            <output type="stdout">BernoulliDistribution
</output>
        </test>
    </suite>
    <suite duration="2" locationUrl="java:suite://smile.stat.distribution.BetaDistributionTest" name="BetaDistributionTest" status="passed">
        <test duration="2" locationUrl="java:test://smile.stat.distribution.BetaDistributionTest/testEntropy" name="BetaDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BetaDistributionTest/testCdf" name="BetaDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BetaDistributionTest/testVar" name="BetaDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BetaDistributionTest/testNpara" name="BetaDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BetaDistributionTest/testLogP" name="BetaDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BetaDistributionTest/testMean" name="BetaDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BetaDistributionTest/testSd" name="BetaDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BetaDistributionTest/testQuantile" name="BetaDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BetaDistributionTest/testBetaDistribution" name="BetaDistributionTest.testBetaDistribution" status="passed">
            <output type="stdout">BetaDistribution
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BetaDistributionTest/testP" name="BetaDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="3" locationUrl="java:suite://smile.stat.distribution.BinomialDistributionTest" name="BinomialDistributionTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.stat.distribution.BinomialDistributionTest/testEntropy" name="BinomialDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BinomialDistributionTest/testCdf" name="BinomialDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BinomialDistributionTest/testVar" name="BinomialDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BinomialDistributionTest/testNpara" name="BinomialDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BinomialDistributionTest/testLogP" name="BinomialDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.BinomialDistributionTest/testMean" name="BinomialDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BinomialDistributionTest/testSd" name="BinomialDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.BinomialDistributionTest/testQuantile" name="BinomialDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.BinomialDistributionTest/testP" name="BinomialDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.stat.distribution.ChiSquareDistributionTest" name="ChiSquareDistributionTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.stat.distribution.ChiSquareDistributionTest/testEntropy" name="ChiSquareDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ChiSquareDistributionTest/testCdf" name="ChiSquareDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ChiSquareDistributionTest/testVar" name="ChiSquareDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ChiSquareDistributionTest/testNpara" name="ChiSquareDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ChiSquareDistributionTest/testLogP" name="ChiSquareDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ChiSquareDistributionTest/testMean" name="ChiSquareDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ChiSquareDistributionTest/testSd" name="ChiSquareDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ChiSquareDistributionTest/testQuantile" name="ChiSquareDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ChiSquareDistributionTest/testP" name="ChiSquareDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.stat.distribution.ExponentialDistributionTest" name="ExponentialDistributionTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.stat.distribution.ExponentialDistributionTest/testEntropy" name="ExponentialDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ExponentialDistributionTest/testCdf" name="ExponentialDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ExponentialDistributionTest/testVar" name="ExponentialDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ExponentialDistributionTest/testNpara" name="ExponentialDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ExponentialDistributionTest/testLogP" name="ExponentialDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ExponentialDistributionTest/testMean" name="ExponentialDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ExponentialDistributionTest/testSd" name="ExponentialDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ExponentialDistributionTest/testExponentialDistribution" name="ExponentialDistributionTest.testExponentialDistribution" status="passed">
            <output type="stdout">ExponentialDistribution
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ExponentialDistributionTest/testQuantile" name="ExponentialDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ExponentialDistributionTest/testP" name="ExponentialDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="758" locationUrl="java:suite://smile.stat.distribution.ExponentialFamilyMixtureTest" name="ExponentialFamilyMixtureTest" status="passed">
        <test duration="758" locationUrl="java:test://smile.stat.distribution.ExponentialFamilyMixtureTest/testEM" name="ExponentialFamilyMixtureTest.testEM" status="passed">
            <output type="stdout">EM
Mixture[3]:{ (Gaussian Distribution(-1.9963, 0.9746):0.2489) (Exponential Distribution(0.8082):0.2537) (Gamma Distribution(2.8620, 2.1500):0.4974)}
</output>
        </test>
    </suite>
    <suite duration="8" locationUrl="java:suite://smile.stat.distribution.FDistributionTest" name="FDistributionTest" status="passed">
        <test duration="3" locationUrl="java:test://smile.stat.distribution.FDistributionTest/testCdf" name="FDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.FDistributionTest/testVar" name="FDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.FDistributionTest/testNpara" name="FDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.FDistributionTest/testLogP" name="FDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.FDistributionTest/testMean" name="FDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.FDistributionTest/testSd" name="FDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.FDistributionTest/testQuantile" name="FDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.FDistributionTest/testP" name="FDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="3" locationUrl="java:suite://smile.stat.distribution.GammaDistributionTest" name="GammaDistributionTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.stat.distribution.GammaDistributionTest/testEntropy" name="GammaDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.GammaDistributionTest/testCdf" name="GammaDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GammaDistributionTest/testVar" name="GammaDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GammaDistributionTest/testNpara" name="GammaDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GammaDistributionTest/testLogP" name="GammaDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GammaDistributionTest/testMean" name="GammaDistributionTest.testMean" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GammaDistributionTest/testSd" name="GammaDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GammaDistributionTest/testQuantile" name="GammaDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.GammaDistributionTest/testGammaDistribution" name="GammaDistributionTest.testGammaDistribution" status="passed">
            <output type="stdout">GammaDistribution
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GammaDistributionTest/testP" name="GammaDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="2" locationUrl="java:suite://smile.stat.distribution.GaussianDistributionTest" name="GaussianDistributionTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GaussianDistributionTest/testEntropy" name="GaussianDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.GaussianDistributionTest/testCdf" name="GaussianDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GaussianDistributionTest/testVar" name="GaussianDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GaussianDistributionTest/testNpara" name="GaussianDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GaussianDistributionTest/testLogP" name="GaussianDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GaussianDistributionTest/testMean" name="GaussianDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.GaussianDistributionTest/testGaussianDistribution" name="GaussianDistributionTest.testGaussianDistribution" status="passed">
            <output type="stdout">GaussianDistribution
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GaussianDistributionTest/testSd" name="GaussianDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GaussianDistributionTest/testQuantile" name="GaussianDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GaussianDistributionTest/testP" name="GaussianDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="7" locationUrl="java:suite://smile.stat.distribution.GaussianMixtureTest" name="GaussianMixtureTest" status="passed">
        <test duration="3" locationUrl="java:test://smile.stat.distribution.GaussianMixtureTest/testMixture3" name="GaussianMixtureTest.testMixture3" status="passed">
            <output type="stdout">Mixture3
Mixture[3]:{ (Gaussian Distribution(22.8220, 1.1610):0.7627) (Gaussian Distribution(16.0858, 1.3252):0.2034) (Gaussian Distribution(1.0067, 0.2987):0.0339)}
</output>
        </test>
        <test duration="4" locationUrl="java:test://smile.stat.distribution.GaussianMixtureTest/testMixture5" name="GaussianMixtureTest.testMixture5" status="passed">
            <output type="stdout">Mixture5
</output>
        </test>
    </suite>
    <suite duration="2" locationUrl="java:suite://smile.stat.distribution.GeometricDistributionTest" name="GeometricDistributionTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.stat.distribution.GeometricDistributionTest/testCdf" name="GeometricDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GeometricDistributionTest/testVar" name="GeometricDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GeometricDistributionTest/testNpara" name="GeometricDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GeometricDistributionTest/testLogP" name="GeometricDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GeometricDistributionTest/testMean" name="GeometricDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GeometricDistributionTest/testSd" name="GeometricDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GeometricDistributionTest/testQuantile" name="GeometricDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.GeometricDistributionTest/testGeometricDistribution" name="GeometricDistributionTest.testGeometricDistribution" status="passed">
            <output type="stdout">GeometricDistribution
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.GeometricDistributionTest/testP" name="GeometricDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="23" locationUrl="java:suite://smile.stat.distribution.HyperGeometricDistributionTest" name="HyperGeometricDistributionTest" status="passed">
        <test duration="5" locationUrl="java:test://smile.stat.distribution.HyperGeometricDistributionTest/testCdf" name="HyperGeometricDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.HyperGeometricDistributionTest/testVar" name="HyperGeometricDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.HyperGeometricDistributionTest/testNpara" name="HyperGeometricDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.HyperGeometricDistributionTest/testLogP" name="HyperGeometricDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.HyperGeometricDistributionTest/testMean" name="HyperGeometricDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.HyperGeometricDistributionTest/testSd" name="HyperGeometricDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="15" locationUrl="java:test://smile.stat.distribution.HyperGeometricDistributionTest/testQuantile" name="HyperGeometricDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.HyperGeometricDistributionTest/testP" name="HyperGeometricDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="3" locationUrl="java:suite://smile.stat.distribution.KernelDensityTest" name="KernelDensityTest" status="passed">
        <test duration="3" locationUrl="java:test://smile.stat.distribution.KernelDensityTest/testVar" name="KernelDensityTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.KernelDensityTest/testBandwidth" name="KernelDensityTest.testBandwidth" status="passed">
            <output type="stdout">bandwidth
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.KernelDensityTest/testLogp" name="KernelDensityTest.testLogp" status="passed">
            <output type="stdout">logp
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.KernelDensityTest/testMean" name="KernelDensityTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.KernelDensityTest/testSd" name="KernelDensityTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.KernelDensityTest/testP" name="KernelDensityTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="7" locationUrl="java:suite://smile.stat.distribution.LogNormalDistributionTest" name="LogNormalDistributionTest" status="passed">
        <test duration="3" locationUrl="java:test://smile.stat.distribution.LogNormalDistributionTest/testEntropy" name="LogNormalDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.LogNormalDistributionTest/testCdf" name="LogNormalDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.LogNormalDistributionTest/testVar" name="LogNormalDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.LogNormalDistributionTest/testNpara" name="LogNormalDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.LogNormalDistributionTest/testLogP" name="LogNormalDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.LogNormalDistributionTest/testMean" name="LogNormalDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.LogNormalDistributionTest/testSd" name="LogNormalDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.LogNormalDistributionTest/testQuantile" name="LogNormalDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.LogNormalDistributionTest/testLogNormalDistribution" name="LogNormalDistributionTest.testLogNormalDistribution" status="passed">
            <output type="stdout">LogNormalDistribution
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.LogNormalDistributionTest/testP" name="LogNormalDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="4" locationUrl="java:suite://smile.stat.distribution.LogisticDistributionTest" name="LogisticDistributionTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.stat.distribution.LogisticDistributionTest/testEntropy" name="LogisticDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.LogisticDistributionTest/testCdf" name="LogisticDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.LogisticDistributionTest/testVar" name="LogisticDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.LogisticDistributionTest/testNpara" name="LogisticDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.LogisticDistributionTest/testLogP" name="LogisticDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.LogisticDistributionTest/testMean" name="LogisticDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.LogisticDistributionTest/testSd" name="LogisticDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.LogisticDistributionTest/testQuantile" name="LogisticDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.LogisticDistributionTest/testP" name="LogisticDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="184" locationUrl="java:suite://smile.stat.distribution.MultivariateGaussianDistributionTest" name="MultivariateGaussianDistributionTest" status="passed">
        <test duration="4" locationUrl="java:test://smile.stat.distribution.MultivariateGaussianDistributionTest/testEntropy" name="MultivariateGaussianDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="6" locationUrl="java:test://smile.stat.distribution.MultivariateGaussianDistributionTest/testMultivariateGaussianDistribution" name="MultivariateGaussianDistributionTest.testMultivariateGaussianDistribution" status="passed">
            <output type="stdout">MultivariateGaussianDistribution
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.MultivariateGaussianDistributionTest/testIsDiagonal" name="MultivariateGaussianDistributionTest.testIsDiagonal" status="passed">
            <output type="stdout">isDiagonal
</output>
        </test>
        <test duration="157" locationUrl="java:test://smile.stat.distribution.MultivariateGaussianDistributionTest/testCdf" name="MultivariateGaussianDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.MultivariateGaussianDistributionTest/testPdf" name="MultivariateGaussianDistributionTest.testPdf" status="passed">
            <output type="stdout">pdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.MultivariateGaussianDistributionTest/testNpara" name="MultivariateGaussianDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="17" locationUrl="java:test://smile.stat.distribution.MultivariateGaussianDistributionTest/testCdf2" name="MultivariateGaussianDistributionTest.testCdf2" status="passed">
            <output type="stdout">cdf2
</output>
        </test>
    </suite>
    <suite duration="3" locationUrl="java:suite://smile.stat.distribution.NegativeBinomialDistributionTest" name="NegativeBinomialDistributionTest" status="passed">
        <test duration="2" locationUrl="java:test://smile.stat.distribution.NegativeBinomialDistributionTest/testCdf" name="NegativeBinomialDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.NegativeBinomialDistributionTest/testVar" name="NegativeBinomialDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.NegativeBinomialDistributionTest/testNpara" name="NegativeBinomialDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.NegativeBinomialDistributionTest/testLogP" name="NegativeBinomialDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.NegativeBinomialDistributionTest/testMean" name="NegativeBinomialDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.NegativeBinomialDistributionTest/testSd" name="NegativeBinomialDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.NegativeBinomialDistributionTest/testQuantile" name="NegativeBinomialDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.NegativeBinomialDistributionTest/testP" name="NegativeBinomialDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="3" locationUrl="java:suite://smile.stat.distribution.PoissonDistributionTest" name="PoissonDistributionTest" status="passed">
        <test duration="2" locationUrl="java:test://smile.stat.distribution.PoissonDistributionTest/testEntropy" name="PoissonDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.PoissonDistributionTest/testCdf" name="PoissonDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.PoissonDistributionTest/testPdf" name="PoissonDistributionTest.testPdf" status="passed">
            <output type="stdout">pdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.PoissonDistributionTest/testVar" name="PoissonDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.PoissonDistributionTest/testPoissonDistribution" name="PoissonDistributionTest.testPoissonDistribution" status="passed">
            <output type="stdout">PoissonDistribution
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.PoissonDistributionTest/testNpara" name="PoissonDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.PoissonDistributionTest/testMean" name="PoissonDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.PoissonDistributionTest/testSd" name="PoissonDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.PoissonDistributionTest/testQuantile" name="PoissonDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.PoissonDistributionTest/testLogPdf" name="PoissonDistributionTest.testLogPdf" status="passed">
            <output type="stdout">logPdf
</output>
        </test>
    </suite>
    <suite duration="0" locationUrl="java:suite://smile.stat.distribution.ShiftedGeometricDistributionTest" name="ShiftedGeometricDistributionTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ShiftedGeometricDistributionTest/testEntropy" name="ShiftedGeometricDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ShiftedGeometricDistributionTest/testCdf" name="ShiftedGeometricDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ShiftedGeometricDistributionTest/testVar" name="ShiftedGeometricDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ShiftedGeometricDistributionTest/testNpara" name="ShiftedGeometricDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ShiftedGeometricDistributionTest/testLogP" name="ShiftedGeometricDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ShiftedGeometricDistributionTest/testMean" name="ShiftedGeometricDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ShiftedGeometricDistributionTest/testSd" name="ShiftedGeometricDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ShiftedGeometricDistributionTest/testQuantile" name="ShiftedGeometricDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ShiftedGeometricDistributionTest/testP" name="ShiftedGeometricDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.ShiftedGeometricDistributionTest/testShiftedGeometricDistribution" name="ShiftedGeometricDistributionTest.testShiftedGeometricDistribution" status="passed">
            <output type="stdout">ShiftedGeometricDistribution
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.stat.distribution.TDistributionTest" name="TDistributionTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.stat.distribution.TDistributionTest/testEntropy" name="TDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.TDistributionTest/testCdf" name="TDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.TDistributionTest/testVar" name="TDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.TDistributionTest/testNpara" name="TDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.TDistributionTest/testLogP" name="TDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.TDistributionTest/testMean" name="TDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.TDistributionTest/testSd" name="TDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.TDistributionTest/testQuantile" name="TDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.TDistributionTest/testP" name="TDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.stat.distribution.WeibullDistributionTest" name="WeibullDistributionTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.stat.distribution.WeibullDistributionTest/testEntropy" name="WeibullDistributionTest.testEntropy" status="passed">
            <output type="stdout">entropy
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.WeibullDistributionTest/testCdf" name="WeibullDistributionTest.testCdf" status="passed">
            <output type="stdout">cdf
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.WeibullDistributionTest/testVar" name="WeibullDistributionTest.testVar" status="passed">
            <output type="stdout">var
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.stat.distribution.WeibullDistributionTest/testNpara" name="WeibullDistributionTest.testNpara" status="passed">
            <output type="stdout">npara
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.WeibullDistributionTest/testLogP" name="WeibullDistributionTest.testLogP" status="passed">
            <output type="stdout">logP
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.WeibullDistributionTest/testMean" name="WeibullDistributionTest.testMean" status="passed">
            <output type="stdout">mean
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.WeibullDistributionTest/testSd" name="WeibullDistributionTest.testSd" status="passed">
            <output type="stdout">sd
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.WeibullDistributionTest/testQuantile" name="WeibullDistributionTest.testQuantile" status="passed">
            <output type="stdout">quantile
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.distribution.WeibullDistributionTest/testP" name="WeibullDistributionTest.testP" status="passed">
            <output type="stdout">p
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.stat.hypothesis.ChiSqTestTest" name="ChiSqTestTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.stat.hypothesis.ChiSqTestTest/testTest2" name="ChiSqTestTest.testTest2" status="passed">
            <output type="stdout">two sample test
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.hypothesis.ChiSqTestTest/testTest" name="ChiSqTestTest.testTest" status="passed">
            <output type="stdout">one sample test
</output>
        </test>
    </suite>
    <suite duration="0" locationUrl="java:suite://smile.stat.hypothesis.CorTestTest" name="CorTestTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.stat.hypothesis.CorTestTest/testSpearman" name="CorTestTest.testSpearman" status="passed">
            <output type="stdout">spearman
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.hypothesis.CorTestTest/testKendall" name="CorTestTest.testKendall" status="passed">
            <output type="stdout">kendall
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.hypothesis.CorTestTest/testPearson" name="CorTestTest.testPearson" status="passed">
            <output type="stdout">pearson
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.hypothesis.CorTestTest/testChisqTest" name="CorTestTest.testChisqTest" status="passed">
            <output type="stdout">chisq
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.stat.hypothesis.FTestTest" name="FTestTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.stat.hypothesis.FTestTest/testTest" name="FTestTest.testTest" status="passed">
            <output type="stdout">test
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.stat.hypothesis.KSTestTest" name="KSTestTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.stat.hypothesis.KSTestTest/testTest_doubleArr_doubleArr" name="KSTestTest.testTest_doubleArr_doubleArr" status="passed">
            <output type="stdout">test
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.hypothesis.KSTestTest/testTest_doubleArr_Distribution" name="KSTestTest.testTest_doubleArr_Distribution" status="passed">
            <output type="stdout">test
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.stat.hypothesis.TTestTest" name="TTestTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.stat.hypothesis.TTestTest/testTestTwoSampleEqualVariance" name="TTestTest.testTestTwoSampleEqualVariance" status="passed">
            <output type="stdout">test
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.hypothesis.TTestTest/testTestTwoSample" name="TTestTest.testTestTwoSample" status="passed">
            <output type="stdout">test
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.hypothesis.TTestTest/testPairedTest" name="TTestTest.testPairedTest" status="passed">
            <output type="stdout">pairedTest
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.hypothesis.TTestTest/testTestCorr" name="TTestTest.testTestCorr" status="passed">
            <output type="stdout">test
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.stat.hypothesis.TTestTest/testTestOneSample" name="TTestTest.testTestOneSample" status="passed">
            <output type="stdout">test
</output>
        </test>
    </suite>
</testrun>
