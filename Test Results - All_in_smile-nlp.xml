<?xml version="1.0" encoding="UTF-8"?><testrun duration="7883" footerText="Generated by IntelliJ IDEA on 11/20/18 5:14 PM" name="All in smile-nlp">
    <count name="total" value="60"/>
    <count name="error" value="2"/>
    <count name="failed" value="3"/>
    <count name="passed" value="55"/>
    <config nameIsGenerated="true" configId="JUnit" name="All in smile-nlp">
        <module name="smile-nlp"/>
        <option name="PACKAGE_NAME" value=""/>
        <option name="TEST_OBJECT" value="package"/>
    </config>
    <root name="&lt;default package&gt;" location="java:suite://&lt;default package&gt;">
        <output type="stdout">/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home/bin/java -ea -Didea.test.cyclic.buffer.size=1048576 &amp;quot;-javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=60616:/Applications/IntelliJ IDEA CE.app/Contents/bin&amp;quot; -Dfile.encoding=UTF-8 -classpath &amp;quot;/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar:/Applications/IntelliJ IDEA CE.app/Contents/plugins/junit/lib/junit-rt.jar:/Applications/IntelliJ IDEA CE.app/Contents/plugins/junit/lib/junit5-rt.jar:/Users/yueyang/eclipse-workspace/smile-git/nlp/target/test-classes:/Users/yueyang/eclipse-workspace/smile-git/nlp/target/classes:/Users/yueyang/eclipse-workspace/smile-git/core/target/classes:/Users/yueyang/eclipse-workspace/smile-git/data/target/classes:/Users/yueyang/eclipse-workspace/smile-git/math/target/classes:/Users/yueyang/eclipse-workspace/smile-git/graph/target/classes:/Users/yueyang/.m2/repository/org/slf4j/slf4j-simple/1.7.25/slf4j-simple-1.7.25.jar:/Users/yueyang/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/Users/yueyang/.m2/repository/junit/junit/4.12/junit-4.12.jar:/Users/yueyang/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/yueyang/.m2/repository/com/novocode/junit-interface/0.11/junit-interface-0.11.jar:/Users/yueyang/.m2/repository/org/scala-sbt/test-interface/1.0/test-interface-1.0.jar&amp;quot; com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 @w@/private/var/folders/kz/558_73xs4h7_ct4pj1wsvrch0000gn/T/idea_working_dirs_junit1.tmp @/private/var/folders/kz/558_73xs4h7_ct4pj1wsvrch0000gn/T/idea_junit1.tmp -socket60615
Process finished with exit code 255
</output>
    </root>
    <suite duration="97" locationUrl="java:suite://smile.nlp.SimpleCorpusTest" name="SimpleCorpusTest" status="failed">
        <test duration="48" locationUrl="java:test://smile.nlp.SimpleCorpusTest/testGetNumBigrams" name="SimpleCorpusTest.testGetNumBigrams" status="failed">
            <output type="stdout">getNumBigrams
</output>
            <output type="stderr">java.lang.AssertionError: 
</output>
            <output type="stdout">Expected :
</output>
            <output type="stderr">17121
</output>
            <output type="stdout">Actual   :
</output>
            <output type="stderr">17136
 
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:834)
	at org.junit.Assert.assertEquals(Assert.java:645)
	at org.junit.Assert.assertEquals(Assert.java:631)
	at smile.nlp.SimpleCorpusTest.testGetNumBigrams(SimpleCorpusTest.java:102)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
</output>
        </test>
        <test duration="2" locationUrl="java:test://smile.nlp.SimpleCorpusTest/testSearch2WithNoHits" name="SimpleCorpusTest.testSearch2WithNoHits" status="passed">
            <output type="stdout">search &amp;#39;no hits&amp;#39;
</output>
        </test>
        <test duration="2" locationUrl="java:test://smile.nlp.SimpleCorpusTest/testSize" name="SimpleCorpusTest.testSize" status="failed">
            <output type="stdout">size
</output>
            <output type="stderr">java.lang.AssertionError: 
</output>
            <output type="stdout">Expected :
</output>
            <output type="stderr">51797
</output>
            <output type="stdout">Actual   :
</output>
            <output type="stderr">51855
 
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:834)
	at org.junit.Assert.assertEquals(Assert.java:645)
	at org.junit.Assert.assertEquals(Assert.java:631)
	at smile.nlp.SimpleCorpusTest.testSize(SimpleCorpusTest.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.SimpleCorpusTest/testGetBigramFrequency" name="SimpleCorpusTest.testGetBigramFrequency" status="passed">
            <output type="stdout">getBigramFrequency
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.SimpleCorpusTest/testGetAverageDocumentSize" name="SimpleCorpusTest.testGetAverageDocumentSize" status="passed">
            <output type="stdout">getAverageDocumentSize
</output>
        </test>
        <test duration="3" locationUrl="java:test://smile.nlp.SimpleCorpusTest/testGetNumTerms" name="SimpleCorpusTest.testGetNumTerms" status="failed">
            <output type="stdout">getNumTerms
</output>
            <output type="stderr">java.lang.AssertionError: 
</output>
            <output type="stdout">Expected :
</output>
            <output type="stderr">14335
</output>
            <output type="stdout">Actual   :
</output>
            <output type="stderr">14345
 
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:834)
	at org.junit.Assert.assertEquals(Assert.java:645)
	at org.junit.Assert.assertEquals(Assert.java:631)
	at smile.nlp.SimpleCorpusTest.testGetNumTerms(SimpleCorpusTest.java:93)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.SimpleCorpusTest/testSearchNoResult" name="SimpleCorpusTest.testSearchNoResult" status="passed">
            <output type="stdout">search &amp;#39;romantic&amp;#39;
</output>
        </test>
        <test duration="30" locationUrl="java:test://smile.nlp.SimpleCorpusTest/testSearch2" name="SimpleCorpusTest.testSearch2" status="passed">
            <output type="stdout">search &amp;#39;romantic comedy&amp;#39;
Document[1080]	15.495313813652114
Document[772]	15.041121047537663
Document[834]	14.63136018245615
Document[4149]	14.63136018245615
Document[891]	14.259815356605033
Document[2185]	14.259815356605033
Document[3523]	13.92137848553273
Document[1710]	13.92137848553273
Document[623]	13.92137848553273
Document[2936]	13.92137848553273
Document[751]	13.611813006305454
Document[645]	13.611813006305454
Document[4767]	13.611813006305454
Document[1182]	13.327575611742233
Document[806]	13.327575611742233
Document[4009]	13.327575611742233
Document[1326]	13.327575611742233
Document[4929]	13.065680021118478
Document[2403]	13.065680021118478
Document[4742]	12.823591660037696
Document[1657]	12.599145365756323
Document[59]	12.599145365756323
Document[1318]	12.599145365756323
Document[4608]	12.390480451541608
Document[3102]	12.390480451541608
Document[2518]	12.195989003198083
Document[3314]	11.844117548951138
Document[1012]	11.684449851390452
Document[3290]	11.684449851390452
Document[1863]	11.53433038823539
Document[2725]	11.259503534058094
Document[4540]	7.747656906826057
Document[2396]	7.5205605237688316
Document[2156]	7.5205605237688316
Document[542]	7.5205605237688316
Document[1014]	7.5205605237688316
Document[501]	7.5205605237688316
Document[3761]	7.315680091228075
Document[4447]	7.315680091228075
Document[4108]	7.315680091228075
Document[3304]	7.315680091228075
Document[2933]	7.315680091228075
Document[3586]	7.315680091228075
Document[746]	7.315680091228075
Document[4828]	7.251769082859745
Document[233]	7.129907678302517
Document[1331]	7.129907678302517
Document[4354]	7.129907678302517
Document[4345]	7.129907678302517
Document[1131]	7.129907678302517
Document[1641]	7.129907678302517
Document[2197]	7.129907678302517
Document[3954]	7.129907678302517
Document[2881]	7.129907678302517
Document[2407]	7.129907678302517
Document[1450]	7.129907678302517
Document[1568]	7.129907678302517
Document[4711]	7.129907678302517
Document[507]	7.129907678302517
Document[4437]	7.129907678302517
Document[4060]	6.960689242766365
Document[2571]	6.960689242766365
Document[1639]	6.960689242766365
Document[3428]	6.960689242766365
Document[953]	6.960689242766365
Document[2628]	6.960689242766365
Document[3604]	6.960689242766365
Document[3601]	6.960689242766365
Document[1785]	6.960689242766365
Document[2792]	6.805906503152727
Document[10]	6.805906503152727
Document[1067]	6.805906503152727
Document[4628]	6.805906503152727
Document[4083]	6.805906503152727
Document[2467]	6.805906503152727
Document[724]	6.805906503152727
Document[3724]	6.805906503152727
Document[4151]	6.805906503152727
Document[2890]	6.805906503152727
Document[3611]	6.805906503152727
Document[4426]	6.805906503152727
Document[2802]	6.805906503152727
Document[106]	6.805906503152727
Document[4178]	6.663787805871117
Document[470]	6.663787805871117
Document[2822]	6.663787805871117
Document[3527]	6.663787805871117
Document[4614]	6.663787805871117
Document[4992]	6.663787805871117
Document[1241]	6.663787805871117
Document[3020]	6.663787805871117
Document[2204]	6.663787805871117
Document[1517]	6.663787805871117
Document[3147]	6.663787805871117
Document[1022]	6.663787805871117
Document[3165]	6.663787805871117
Document[2233]	6.663787805871117
Document[2916]	6.663787805871117
Document[605]	6.663787805871117
Document[974]	6.663787805871117
Document[1310]	6.663787805871117
Document[4165]	6.663787805871117
Document[1053]	6.663787805871117
Document[2812]	6.663787805871117
Document[4695]	6.532840010559239
Document[595]	6.532840010559239
Document[4445]	6.532840010559239
Document[2726]	6.532840010559239
Document[4483]	6.532840010559239
Document[4099]	6.532840010559239
Document[4403]	6.532840010559239
Document[2507]	6.532840010559239
Document[2242]	6.532840010559239
Document[3052]	6.532840010559239
Document[4036]	6.532840010559239
Document[2404]	6.532840010559239
Document[1292]	6.532840010559239
Document[4570]	6.411795830018848
Document[2421]	6.411795830018848
Document[22]	6.411795830018848
Document[1117]	6.411795830018848
Document[2753]	6.411795830018848
Document[4322]	6.411795830018848
Document[1606]	6.411795830018848
Document[2671]	6.2995726828781615
Document[3915]	6.2995726828781615
Document[995]	6.2995726828781615
Document[3812]	6.2995726828781615
Document[1119]	6.2995726828781615
Document[4118]	6.2995726828781615
Document[2229]	6.2995726828781615
Document[1546]	6.2995726828781615
Document[2511]	6.2995726828781615
Document[1267]	6.2995726828781615
Document[966]	6.2995726828781615
Document[4561]	6.2995726828781615
Document[2416]	6.2995726828781615
Document[2530]	6.2995726828781615
Document[508]	6.2995726828781615
Document[1971]	6.195240225770804
Document[876]	6.195240225770804
Document[1901]	6.195240225770804
Document[2173]	6.195240225770804
Document[1247]	6.195240225770804
Document[4488]	6.195240225770804
Document[4380]	6.195240225770804
Document[3463]	6.195240225770804
Document[1722]	6.195240225770804
Document[4675]	6.195240225770804
Document[2147]	6.097994501599041
Document[2832]	6.097994501599041
Document[2220]	6.097994501599041
Document[270]	6.097994501599041
Document[1653]	6.097994501599041
Document[3088]	6.007137182664839
Document[3957]	6.007137182664839
Document[1663]	6.007137182664839
Document[869]	6.007137182664839
Document[4461]	5.922058774475569
Document[421]	5.922058774475569
Document[4804]	5.922058774475569
Document[293]	5.922058774475569
Document[734]	5.922058774475569
Document[177]	5.842224925695226
Document[2675]	5.767165194117695
Document[3055]	5.767165194117695
Document[1148]	5.767165194117695
Document[4706]	5.767165194117695
Document[4727]	5.696463769534987
Document[3782]	5.696463769534987
Document[316]	5.629751767029047
Document[3315]	5.507017519095269
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.SimpleCorpusTest/testGetTermFrequency" name="SimpleCorpusTest.testGetTermFrequency" status="passed">
            <output type="stdout">getTermFrequency
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.nlp.SimpleCorpusTest/testGetNumDocuments" name="SimpleCorpusTest.testGetNumDocuments" status="passed">
            <output type="stdout">getNumDocuments
</output>
        </test>
        <test duration="11" locationUrl="java:test://smile.nlp.SimpleCorpusTest/testSearch" name="SimpleCorpusTest.testSearch" status="passed">
            <output type="stdout">search &amp;#39;romantic&amp;#39;
Document[1080]	10.662135074533522
Document[4540]	10.662135074533522
Document[501]	10.34961061194912
Document[542]	10.34961061194912
Document[772]	10.34961061194912
Document[834]	10.06765919461754
Document[4149]	10.06765919461754
Document[891]	9.812003764394603
Document[2185]	9.812003764394603
Document[623]	9.579129511122227
Document[1710]	9.579129511122227
Document[2936]	9.579129511122227
Document[3428]	9.579129511122227
Document[3523]	9.579129511122227
Document[106]	9.36612130789204
Document[645]	9.36612130789204
Document[751]	9.36612130789204
Document[2890]	9.36612130789204
Document[3724]	9.36612130789204
Document[4767]	9.36612130789204
Document[806]	9.17054104856251
Document[1182]	9.17054104856251
Document[1326]	9.17054104856251
Document[2916]	9.17054104856251
Document[3147]	9.17054104856251
Document[4009]	9.17054104856251
Document[4165]	9.17054104856251
Document[4992]	9.17054104856251
Document[2403]	8.990333910053641
Document[4929]	8.990333910053641
Document[2753]	8.823755882860569
Document[4742]	8.823755882860569
Document[59]	8.669317145098569
Document[995]	8.669317145098569
Document[1119]	8.669317145098569
Document[1318]	8.669317145098569
Document[1657]	8.669317145098569
Document[2229]	8.669317145098569
Document[1901]	8.52573738108546
Document[1971]	8.52573738108546
Document[3102]	8.52573738108546
Document[4608]	8.52573738108546
Document[2518]	8.391910204816638
Document[3314]	8.149791779906261
Document[4804]	8.149791779906261
Document[1012]	8.039926398739736
Document[3290]	8.039926398739736
Document[1863]	7.9366310403672236
Document[2725]	7.747526058268328
Document[3315]	7.578622201853587
</output>
        </test>
    </suite>
    <suite duration="420" locationUrl="java:suite://smile.nlp.collocation.AprioriPhraseExtractorTest" name="AprioriPhraseExtractorTest" status="passed">
        <test duration="420" locationUrl="java:test://smile.nlp.collocation.AprioriPhraseExtractorTest/testExtract" name="AprioriPhraseExtractorTest.testExtract" status="passed">
            <output type="stdout">extract
([machine], 198)([computer], 57)([think], 46)([question], 44)([answer], 39)([argument], 35)([digital], 35)([game], 35)([man], 34)([make], 33)([state], 28)([say], 28)([number], 27)([interrogator], 25)([possible], 24)([consider], 22)([describ], 22)([discrete-state], 20)([behaviour], 20)([view], 20)([doe], 20)([mean], 19)([rule], 19)([capacity], 19)([idea], 19)([fact], 19)([try], 19)([form], 19)([human], 19)([store], 18)([kind], 18)([time], 18)([mind], 18)([process], 17)([quite], 17)([believe], 17)([storage], 17)([imitation], 16)([like], 15)([play], 15)([child], 15)([result], 15)([right], 15)([method], 14)([operation], 14)([probably], 14)([instance], 14)([instruction], 14)([construct], 14)([ask], 13)([given], 13)([subject], 13)([use], 13)([random], 13)([someth], 13)([problem], 12)([certain], 12)([way], 12)([work], 12)([programme], 12)([b], 12)([learn], 12)([really], 11)([course], 11)([type], 11)([know], 11)([suppose], 11)([teach], 11)([position], 11)([law], 11)([new], 11)([point], 10)([important], 10)([objection], 10)([case], 10)([best], 10)([apply], 10)([present], 10)([usually], 10)([property], 10)([provid], 9)([error], 9)([day], 9)([scientific], 9)([definition], 9)([principle], 9)([appear], 9)([claim], 9)([feel], 9)([reply], 9)([table], 9)([order], 9)([attempt], 9)([digit], 9)([wish], 9)([logical], 9)([paper], 8)([effect], 8)([expect], 8)([mathematical], 8)([calculation], 8)([moment], 8)([statement], 8)([teacher], 8)([soul], 8)([short], 8)([different], 8)([predict], 8)([shall], 8)([correspond], 8)([condition], 8)([sort], 8)([mechanical], 8)([difficult], 8)([sense], 8)([regard], 8)([signal], 8)([term], 8)([reader], 8)([need], 8)([appropriate], 8)([small], 7)([thing], 7)([power], 7)([program], 7)([suitable], 7)([light], 7)([wrong], 7)([experiment], 7)([speed], 7)([similar], 7)([mention], 7)([general], 7)([let], 7)([concern], 7)([engineer], 7)([obey], 7)([possibility], 7)([mimic], 7)([produce], 7)([matter], 7)([education], 7)([variou], 7)([write], 7)([mistake], 7)([example], 7)([perhap], 7)([x], 7)([set], 7)([sufficiently], 7)([information], 7)([disability], 6)([follow], 6)([surprise], 6)([value], 6)([regulate], 6)([word], 6)([better], 6)([reward], 6)([identification], 6)([imperative], 6)([available], 6)([brain], 6)([satisfactory], 6)([express], 6)([difference], 6)([occur], 6)([thought], 6)([accept], 6)([proposition], 6)([conduct], 6)([wheel], 6)([function], 6)([witness], 6)([induction], 6)([consequence], 6)([cause], 6)([punishment], 6)([nervou], 6)([manchester], 6)([later], 6)([thu], 6)([carry], 6)([circumstance], 6)([object], 6)([size], 6)([simple], 5)([purpose], 5)([decide], 5)([fall], 5)([well-establish], 5)([adequate], 5)([homework], 5)([advantage], 5)([provide], 5)([lead], 5)([natural], 5)([largely], 5)([book], 5)([quot], 5)([come], 5)([satisfy], 5)([conclusion], 5)([english], 5)([support], 5)([winter&amp;#39;], 5)([accord], 5)([technique], 5)([men], 5)([investigate], 5)([animal], 5)([analogy], 5)([likely], 5)([consciousness], 5)([skin], 5)([speak], 5)([solution], 5)([pile], 5)([woman], 5)([thousand], 5)([large], 5)([complete], 5)([electrical], 5)([end], 5)([engine], 5)([good], 5)([explain], 5)([lady], 5)([argu], 5)([add], 5)([criticism], 5)([got], 5)([special], 5)([c], 5)([prove], 5)([year], 5)([=], 5)([analytical], 5)([noth], 5)([line], 5)([supply], 4)([necessarily], 4)([tell], 4)([limitation], 4)([instead], 4)([theological], 4)([clear], 4)([original], 4)([replac], 4)([shown], 4)([listen], 4)([particular], 4)([imply], 4)([consist], 4)([requir], 4)([help], 4)([suggest], 4)([opinion], 4)([far], 4)([differential], 4)([normal], 4)([allow], 4)([theory], 4)([base], 4)([rise], 4)([step], 4)([assume], 4)([typical], 4)([e.g.], 4)([variant], 4)([mechanism], 4)([cover], 4)([unable], 4)([discussion], 4)([definite], 4)([people], 4)([necessary], 4)([10], 4)([want], 4)([control], 4)([electronic], 4)([design], 4)([manner], 4)([esp], 4)([true], 4)([definitely], 4)([alternatively], 4)([intellectual], 4)([conjecture], 4)([eventually], 4)([hope], 4)([arithmetic], 4)([increas], 4)([second], 4)([fear], 4)([little], 4)([future], 4)([professor], 4)([draw], 4)([belief], 4)([impression], 4)([etc.], 4)([systematic], 4)([telepathy], 4)([knowledge], 4)([anyth], 4)([notice], 4)([equivalent], 4)([satisfactorily], 4)([permit], 4)([room], 4)([finite], 4)([possibly], 4)([evidence], 4)([did], 4)([useful], 4)([surpris], 4)([q], 4)([analyser], 4)([test], 4)([sonnet], 4)([5], 4)([2], 4)([0], 4)([contain], 4)([discover], 4)([class], 4)([importance], 4)([i.e.], 4)([stop], 4)([packet], 4)
([digital, computer], 34)([discrete-state, machine], 17)([imitation, game], 15)([storage, capacity], 11)([human, computer], 9)([machine, think], 9)([child, machine], 7)([scientific, induction], 6)([analytical, engine], 5)([winter&amp;#39;, day], 5)([someth, like], 5)([learn, machine], 5)([well-establish, fact], 5)([subject, matter], 4)([differential, analyser], 4)([manchester, machine], 4)
([rule, of, conduct], 5)([law, of, behaviour], 5)([number, of, state], 5)([point, of, view], 4)([punishment, and, reward], 4)([machine, in, question], 4)([argument, from, consciousness], 4)
</output>
        </test>
    </suite>
    <suite duration="6837" locationUrl="java:suite://smile.nlp.collocation.BigramCollocationFinderTest" name="BigramCollocationFinderTest" status="passed">
        <test duration="3562" locationUrl="java:test://smile.nlp.collocation.BigramCollocationFinderTest/testFind_Corpus_double" name="BigramCollocationFinderTest.testFind_Corpus_double" status="passed">
            <output type="stdout">find
(romantic comedy, 29, 275.41)
(clich �, 18, 205.80)
(soap opera, 13, 198.22)
(special effects, 14, 164.22)
(character study, 14, 142.82)
(subject matter, 12, 131.42)
(� s, 14, 124.20)
(action sequences, 11, 117.59)
(running time, 12, 117.15)
(blue crush, 7, 116.41)
(plays like, 16, 114.88)
(harry potter, 6, 111.65)
(sandra bullock, 6, 109.19)
(worth seeing, 10, 106.35)
(� o, 13, 103.41)
(psychological thriller, 9, 96.55)
(90 minutes, 8, 95.86)
(feel like, 16, 93.25)
(human nature, 9, 92.43)
(feels like, 15, 85.75)
(years ago, 7, 82.57)
(after-school special, 6, 81.88)
(brutally honest, 6, 81.23)
(big screen, 10, 75.47)
(falls short, 7, 73.22)
(digital video, 6, 72.81)
(spy kids, 7, 72.47)
(human spirit, 7, 68.71)
(n �, 8, 67.71)
(10 minutes, 6, 66.20)
(right place, 7, 59.68)
(just plain, 7, 58.17)
(good intentions, 6, 57.65)
(best films, 10, 56.71)
(good time, 13, 53.72)
(excellent performances, 6, 48.80)
(world war, 6, 47.34)
(pretty good, 8, 45.62)
(love story, 11, 44.13)
(long time, 8, 42.26)
(best work, 7, 32.27)
(horror film, 7, 25.88)
(family film, 8, 22.32)
(horror movie, 6, 22.30)
(action movie, 8, 20.44)
(� �, 6, 16.97)
(little film, 7, 8.57)
(movie does, 6, 8.53)
(just like, 6, 8.10)
(new film, 6, 6.89)
(good movie, 7, 5.90)
(good film, 7, 4.29)
</output>
        </test>
        <test duration="3275" locationUrl="java:test://smile.nlp.collocation.BigramCollocationFinderTest/testFind_Corpus_int" name="BigramCollocationFinderTest.testFind_Corpus_int" status="passed">
            <output type="stdout">find
(romantic comedy, 29, 275.41)
(clich �, 18, 205.80)
(soap opera, 13, 198.22)
(special effects, 14, 164.22)
(character study, 14, 142.82)
(subject matter, 12, 131.42)
(� s, 14, 124.20)
(action sequences, 11, 117.59)
(running time, 12, 117.15)
(blue crush, 7, 116.41)
</output>
        </test>
    </suite>
    <suite duration="0" locationUrl="java:suite://smile.nlp.dictionary.EnglishPunctuationsTest" name="EnglishPunctuationsTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.nlp.dictionary.EnglishPunctuationsTest/testContains" name="EnglishPunctuationsTest.testContains" status="passed">
            <output type="stdout">contains
</output>
        </test>
    </suite>
    <suite duration="148" locationUrl="java:suite://smile.nlp.keyword.CooccurrenceKeywordExtractorTest" name="CooccurrenceKeywordExtractorTest" status="passed">
        <test duration="148" locationUrl="java:test://smile.nlp.keyword.CooccurrenceKeywordExtractorTest/testExtract" name="CooccurrenceKeywordExtractorTest.testExtract" status="passed">
            <output type="stdout">extract
([storage, capacity], 11)
([digital, computer], 34)
([machine], 198)
([instruction], 14)
([think], 46)
([discrete-state, machine], 17)
([store], 18)
([imitation, game], 15)
([teach], 11)
([view], 20)
</output>
        </test>
    </suite>
    <suite duration="15" locationUrl="java:suite://smile.nlp.normalizer.SimpleNormalizerTest" name="SimpleNormalizerTest" status="passed">
        <test duration="15" locationUrl="java:test://smile.nlp.normalizer.SimpleNormalizerTest/testSplit" name="SimpleNormalizerTest.testSplit" status="passed">
            <output type="stdout">normalize text
</output>
        </test>
    </suite>
    <suite duration="298" locationUrl="java:suite://smile.nlp.pos.EnglishPOSLexiconTest" name="EnglishPOSLexiconTest" status="passed">
        <test duration="298" locationUrl="java:test://smile.nlp.pos.EnglishPOSLexiconTest/testGet" name="EnglishPOSLexiconTest.testGet" status="passed">
            <output type="stdout">get
</output>
        </test>
    </suite>
    <suite duration="8" locationUrl="java:suite://smile.nlp.pos.HMMPOSTaggerTest" name="HMMPOSTaggerTest" status="error">
        <test duration="7" locationUrl="java:test://smile.nlp.pos.HMMPOSTaggerTest/testWSJ" name="HMMPOSTaggerTest.testWSJ" status="error">
            <output type="stdout">WSJ
</output>
            <output type="stderr">java.lang.IllegalArgumentException: Invalid number of CV rounds: 10
	at smile.validation.CrossValidation.&amp;lt;init&amp;gt;(CrossValidation.java:70)
	at smile.validation.CrossValidation.&amp;lt;init&amp;gt;(CrossValidation.java:55)
	at smile.nlp.pos.HMMPOSTaggerTest.testWSJ(HMMPOSTaggerTest.java:150)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.nlp.pos.HMMPOSTaggerTest/testBrown" name="HMMPOSTaggerTest.testBrown" status="error">
            <output type="stdout">BROWN
</output>
            <output type="stderr">java.lang.IllegalArgumentException: Invalid number of CV rounds: 10
	at smile.validation.CrossValidation.&amp;lt;init&amp;gt;(CrossValidation.java:70)
	at smile.validation.CrossValidation.&amp;lt;init&amp;gt;(CrossValidation.java:55)
	at smile.nlp.pos.HMMPOSTaggerTest.testBrown(HMMPOSTaggerTest.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
</output>
        </test>
    </suite>
    <suite duration="2" locationUrl="java:suite://smile.nlp.pos.RegexPOSTaggerTest" name="RegexPOSTaggerTest" status="passed">
        <test duration="2" locationUrl="java:test://smile.nlp.pos.RegexPOSTaggerTest/testTag" name="RegexPOSTaggerTest.testTag" status="passed">
            <output type="stdout">tag
</output>
        </test>
    </suite>
    <suite duration="0" locationUrl="java:suite://smile.nlp.relevance.BM25Test" name="BM25Test" status="passed">
        <test duration="0" locationUrl="java:test://smile.nlp.relevance.BM25Test/testRank" name="BM25Test.testRank" status="passed">
            <output type="stdout">rank
</output>
        </test>
    </suite>
    <suite duration="0" locationUrl="java:suite://smile.nlp.relevance.TFIDFTest" name="TFIDFTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.nlp.relevance.TFIDFTest/testRank" name="TFIDFTest.testRank" status="passed">
            <output type="stdout">rank
</output>
        </test>
    </suite>
    <suite duration="24" locationUrl="java:suite://smile.nlp.stemmer.LancasterStemmerTest" name="LancasterStemmerTest" status="passed">
        <test duration="24" locationUrl="java:test://smile.nlp.stemmer.LancasterStemmerTest/testStem" name="LancasterStemmerTest.testStem" status="passed">
            <output type="stdout">stem
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.nlp.stemmer.PorterStemmerTest" name="PorterStemmerTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.nlp.stemmer.PorterStemmerTest/testStem" name="PorterStemmerTest.testStem" status="passed">
            <output type="stdout">stem
</output>
        </test>
    </suite>
    <suite duration="9" locationUrl="java:suite://smile.nlp.tokenizer.BreakIteratorSentenceSplitterTest" name="BreakIteratorSentenceSplitterTest" status="passed">
        <test duration="9" locationUrl="java:test://smile.nlp.tokenizer.BreakIteratorSentenceSplitterTest/testSplit" name="BreakIteratorSentenceSplitterTest.testSplit" status="passed">
            <output type="stdout">split
</output>
        </test>
    </suite>
    <suite duration="5" locationUrl="java:suite://smile.nlp.tokenizer.BreakIteratorTokenizerTest" name="BreakIteratorTokenizerTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.BreakIteratorTokenizerTest/testSplitAbbreviation" name="BreakIteratorTokenizerTest.testSplitAbbreviation" status="passed">
            <output type="stdout">tokenize
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.BreakIteratorTokenizerTest/testSplitTis" name="BreakIteratorTokenizerTest.testSplitTis" status="passed">
            <output type="stdout">tokenize tis
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.BreakIteratorTokenizerTest/testSplit" name="BreakIteratorTokenizerTest.testSplit" status="passed">
            <output type="stdout">tokenize
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.BreakIteratorTokenizerTest/testSplitRomanNumeral" name="BreakIteratorTokenizerTest.testSplitRomanNumeral" status="passed">
            <output type="stdout">tokenize roman numeral
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.BreakIteratorTokenizerTest/testSplitContraction" name="BreakIteratorTokenizerTest.testSplitContraction" status="passed">
            <output type="stdout">tokenize contraction
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.BreakIteratorTokenizerTest/testSplitSingleQuote" name="BreakIteratorTokenizerTest.testSplitSingleQuote" status="passed">
            <output type="stdout">tokenize single quote
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.BreakIteratorTokenizerTest/testSplitHyphen" name="BreakIteratorTokenizerTest.testSplitHyphen" status="passed">
            <output type="stdout">tokenize hyphen
</output>
        </test>
    </suite>
    <suite duration="14" locationUrl="java:suite://smile.nlp.tokenizer.PennTreebankTokenizerTest" name="PennTreebankTokenizerTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.PennTreebankTokenizerTest/testTokenizeDiacritizedWords" name="PennTreebankTokenizerTest.testTokenizeDiacritizedWords" status="passed">
            <output type="stdout">tokenize words with diacritized chars (both composite and combining)
</output>
        </test>
        <test duration="3" locationUrl="java:test://smile.nlp.tokenizer.PennTreebankTokenizerTest/testSplitAbbreviation" name="PennTreebankTokenizerTest.testSplitAbbreviation" status="passed">
            <output type="stdout">tokenize abbreviation
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.PennTreebankTokenizerTest/testSplitTis" name="PennTreebankTokenizerTest.testSplitTis" status="passed">
            <output type="stdout">tokenize tis
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.PennTreebankTokenizerTest/testSplit" name="PennTreebankTokenizerTest.testSplit" status="passed">
            <output type="stdout">tokenize
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.PennTreebankTokenizerTest/testSplitRomanNumeral" name="PennTreebankTokenizerTest.testSplitRomanNumeral" status="passed">
            <output type="stdout">tokenize roman numeral
</output>
        </test>
        <test duration="4" locationUrl="java:test://smile.nlp.tokenizer.PennTreebankTokenizerTest/testSplitContraction" name="PennTreebankTokenizerTest.testSplitContraction" status="passed">
            <output type="stdout">tokenize contraction
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.PennTreebankTokenizerTest/testSplitSingleQuote" name="PennTreebankTokenizerTest.testSplitSingleQuote" status="passed">
            <output type="stdout">tokenize single quote
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.PennTreebankTokenizerTest/testTokenizeNonLatinChars" name="PennTreebankTokenizerTest.testTokenizeNonLatinChars" status="passed">
            <output type="stdout">tokenize words containing non-Latin chars
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.PennTreebankTokenizerTest/testSplitHyphen" name="PennTreebankTokenizerTest.testSplitHyphen" status="passed">
            <output type="stdout">tokenize hyphen
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.PennTreebankTokenizerTest/testTokenizeMixedAlphanumWords" name="PennTreebankTokenizerTest.testTokenizeMixedAlphanumWords" status="passed">
            <output type="stdout">tokenize words with mixed numbers, letters, and punctuation
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.PennTreebankTokenizerTest/testTokenizeVariousSpaces" name="PennTreebankTokenizerTest.testTokenizeVariousSpaces" status="passed">
            <output type="stdout">tokenize words separated by various kinds of space
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.nlp.tokenizer.SimpleParagraphSplitterTest" name="SimpleParagraphSplitterTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.SimpleParagraphSplitterTest/testSplit" name="SimpleParagraphSplitterTest.testSplit" status="passed">
            <output type="stdout">split
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://smile.nlp.tokenizer.SimpleSentenceSplitterTest" name="SimpleSentenceSplitterTest" status="passed">
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.SimpleSentenceSplitterTest/testSplit" name="SimpleSentenceSplitterTest.testSplit" status="passed">
            <output type="stdout">split
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.SimpleSentenceSplitterTest/testSplitUnicode" name="SimpleSentenceSplitterTest.testSplitUnicode" status="passed">
            <output type="stdout">split with unicode chars
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.SimpleSentenceSplitterTest/testSplitEndWithAbbreviation" name="SimpleSentenceSplitterTest.testSplitEndWithAbbreviation" status="passed">
            <output type="stdout">split with abbreviation ending
</output>
        </test>
    </suite>
    <suite duration="3" locationUrl="java:suite://smile.nlp.tokenizer.SimpleTokenizerTest" name="SimpleTokenizerTest" status="passed">
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.SimpleTokenizerTest/testTokenizeDiacritizedWords" name="SimpleTokenizerTest.testTokenizeDiacritizedWords" status="passed">
            <output type="stdout">tokenize words with diacritized chars (both composite and combining)
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.SimpleTokenizerTest/testSplitAbbreviation" name="SimpleTokenizerTest.testSplitAbbreviation" status="passed">
            <output type="stdout">tokenize abbreviation
</output>
        </test>
        <test duration="1" locationUrl="java:test://smile.nlp.tokenizer.SimpleTokenizerTest/testTokenizeTis" name="SimpleTokenizerTest.testTokenizeTis" status="passed">
            <output type="stdout">tokenize tis
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.SimpleTokenizerTest/testTokenizeToC" name="SimpleTokenizerTest.testTokenizeToC" status="passed">
            <output type="stdout">tokenize 1.2 Interpretation.....................................................................................................................3
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.SimpleTokenizerTest/testTokenizeSingleQuote" name="SimpleTokenizerTest.testTokenizeSingleQuote" status="passed">
            <output type="stdout">tokenize single quote
</output>
        </test>
        <test duration="2" locationUrl="java:test://smile.nlp.tokenizer.SimpleTokenizerTest/testSplitContraction" name="SimpleTokenizerTest.testSplitContraction" status="passed">
            <output type="stdout">tokenize contraction
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.SimpleTokenizerTest/testTokenize" name="SimpleTokenizerTest.testTokenize" status="passed">
            <output type="stdout">tokenize
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.SimpleTokenizerTest/testTokenizeNonLatinChars" name="SimpleTokenizerTest.testTokenizeNonLatinChars" status="passed">
            <output type="stdout">tokenize words containing non-Latin chars
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.SimpleTokenizerTest/testTokenizeRomanNumeral" name="SimpleTokenizerTest.testTokenizeRomanNumeral" status="passed">
            <output type="stdout">tokenize roman numeral
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.SimpleTokenizerTest/testTokenizeHyphen" name="SimpleTokenizerTest.testTokenizeHyphen" status="passed">
            <output type="stdout">tokenize hyphen
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.SimpleTokenizerTest/testTokenizeMixedAlphanumWords" name="SimpleTokenizerTest.testTokenizeMixedAlphanumWords" status="passed">
            <output type="stdout">tokenize words with mixed numbers, letters, and punctuation
</output>
        </test>
        <test duration="0" locationUrl="java:test://smile.nlp.tokenizer.SimpleTokenizerTest/testTokenizeVariousSpaces" name="SimpleTokenizerTest.testTokenizeVariousSpaces" status="passed">
            <output type="stdout">tokenize words separated by various kinds of space
</output>
        </test>
    </suite>
</testrun>
